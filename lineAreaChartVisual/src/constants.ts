import {
  EBarComparisonMode,
  BarDistanceType,
  BarType,
  ColorPaletteType,
  DataLabelsFontSizeType,
  DataLabelsPlacement,
  DataLabelsType,
  EBeforeAfterPosition,
  ELCRPosition,
  EReferenceLinesType,
  EStartEndPosition,
  EXYAxisNames,
  FontStyle,
  LineType,
  Orientation,
  Position,
  RankingFilterType,
  ESortOrder,
  ESortFor,
  ESortBy,
  EAutoCustomType,
  ERelationshipToMeasure,
  EErrorBarsTooltipLabelFormat,
  EErrorBarsMarkerShape,
  AxisCategoryType,
  EDynamicDeviationDisplayTypes,
  EDynamicDeviationLabelDisplayTypes,
  EDynamicDeviationConnectingLineTypes,
  EReferenceLineComputation,
  EBarHighlightType,
  EDataLabelsDisplayStyleType,
  ESmallMultiplesLayoutType,
  ESmallMultiplesDisplayType,
  ESmallMultiplesViewType,
  ESmallMultiplesAxisType,
  ESmallMultiplesXAxisPosition,
  ESmallMultiplesYAxisPosition,
  ESmallMultiplesHeaderDisplayType,
  ESmallMultiplesHeaderAlignment,
  ESmallMultiplesHeaderPosition,
  ESmallMultiplesBackgroundType,
  ESmallMultiplesShadowType,
} from "./enum";
import {
  IChartSettings,
  ICutAndClipAxisSettings,
  IDataColorsSettings,
  IDataLabelsSettings,
  IDynamicDeviationSettings,
  IErrorBarsSettings,
  IGridLinesSettings,
  IPatternSettings,
  IRaceBarChartSettings,
  IRankingSettings,
  IReferenceLinesSettings,
  ISeriesLabelSettings,
  ISmallMultiplesSettings,
  ISortingSettings,
  IXAxisSettings,
  IXGridLinesSettings,
  IYAxisSettings,
  IYGridLinesSettings,
} from "./visual-settings.model";

export const CHART_SETTINGS: IChartSettings = {
  barDistanceType: BarDistanceType.Custom,
  groupedBarDistanceType: BarDistanceType.Custom,
  barDistance: 30,
  groupedBarDistance: 0,
  orientation: Orientation.Vertical,
  barType: BarType.Normal,
  maxSubcategoriesLength: 15,
  prevBarType: undefined,
  barXPadding: 25,
  barYPadding: 25,
  isPercentageStackedBar: false,
  isHadSubcategories: false,
  isShowBarBorder: true,
  barBorderColor: "rgb(255, 255, 255)",
  barBorderWidth: 1,
  barComparisonMode: EBarComparisonMode.Auto,
  isIBCSThemeEnabled: false,
  barHighlightType: EBarHighlightType.None,
  isShowDataLabelForHighlightedBars: true,
  highlightedBarRecentColor: "rgb(245, 130, 32)",
  highlightedBarMinColor: "rgb(255, 0, 0)",
  highlightedBarMaxColor: "rgb(140, 180, 0)",
};

export const DATA_LABELS_SETTINGS: IDataLabelsSettings = {
  showDataLabels: true,
  showTotalLabels: true,
  showLabelsBelowReferenceLine: false,
  dataLabelsType: DataLabelsType.DataLabels,
  dataLabels: {
    color: "rgb(255, 255, 255)",
    orientation: Orientation.Horizontal,
    fontSize: 12,
    fontFamily: '"Segoe UI", wf_segoe-ui_normal, helvetica, arial, sans-serif',
    showBackground: true,
    backgroundColor: "rgb(0,0,0)",
    transparency: 90,
    fontStyle: [FontStyle.None],
    placement: DataLabelsPlacement.Center,
    fontSizeType: DataLabelsFontSizeType.Auto,
    textStrokeColor: "rgba(74,74,74,1)",
    textStrokeWidth: 5,
    displayStyleType: EDataLabelsDisplayStyleType.All,
  },
  totalLabels: {
    color: "rgb(102,102,102)",
    orientation: Orientation.Horizontal,
    fontSize: 12,
    fontFamily: '"Segoe UI", wf_segoe-ui_normal, helvetica, arial, sans-serif',
    showBackground: true,
    backgroundColor: "rgb(0,0,0)",
    transparency: 90,
    fontStyle: [FontStyle.None],
    fontSizeType: DataLabelsFontSizeType.Auto,
    displayStyleType: EDataLabelsDisplayStyleType.All,
  },
};

export const X_GRID_LINES_SETTINGS: IXGridLinesSettings = {
  show: false,
  lineType: LineType.Dotted,
  lineWidth: 1,
  lineColor: "rgb(151,151,151)",
};

export const Y_GRID_LINES_SETTINGS: IYGridLinesSettings = {
  show: false,
  lineType: LineType.Dotted,
  lineWidth: 1,
  lineColor: "rgb(151,151,151)",
};

export const GRID_LINES_SETTINGS: IGridLinesSettings = {
  xGridLines: X_GRID_LINES_SETTINGS,
  yGridLines: Y_GRID_LINES_SETTINGS,
};

export const DATA_COLORS: IDataColorsSettings = {
  fillmin: "rgb(92,113,187)",
  midcolor: false,
  fillmid: "rgb(3,194,129)",
  fillmax: "rgb(253,98,94)",
  fillnull: "rgb(242,242,242)",
  fillType: ColorPaletteType.PowerBi,
  numberOfClasses: 5,
  byCategoryColors: [],
  schemeColors: ["rgb(241,238,246)", "rgb(189,201,225)", "rgb(116,169,207)", "rgb(43,140,190)", "rgb(4,90,141)"],
  reverse: false,
  isGradient: false,
  singleColor: "rgb(91,121,185)",
  barColor: "rgb(91,121,185)",
  defaultColor: "rgb(92,113,187)",
  selectedCategoryName: null,
  selectedCategoryColor: "rgb(5, 183, 155)",
  colorBlindSafe: false,
  isGradientWithinBar: false,
  subCategoriesColorMap: {},
};

export const RANKING_SETTINGS: IRankingSettings = {
  filterType: RankingFilterType.TopN,
  count: 5,
  showRemainingAsOthers: false,
  isCategoriesRanking: false,
  isSubcategoriesRanking: false,
  barColor: "rgb(84, 84, 84)",
  subCategoriesRanking: {
    filterType: RankingFilterType.TopN,
    count: 10,
    showRemainingAsOthers: false,
    barColor: "rgb(84, 84, 84)",
  },
};

export const SORTING_SETTINGS: ISortingSettings = {
  isCustomSortEnabled: true,
  axis: {
    sortBy: null,
    sortOrder: ESortOrder.Descending,
    isMeasure: false,
    isMultiMeasure: false,
  },
  legend: {
    sortBy: ESortBy.Name,
    sortOrder: ESortOrder.Descending,
  },
  smallMultiples: {
    sortBy: ESortBy.Value,
    sortOrder: ESortOrder.Descending,
    isMeasure: false
  }
};

export const PATTERN_SETTINGS: IPatternSettings = {
  enable: false,
  showBorder: false,
  borderWidth: 1,
  patterns: [],
  horizontalPatterns: [],
  verticalPatterns: [],
  singlePattern: { patternIdentifier: null, category: "single", isImagePattern: false },
  othersPattern: { patternIdentifier: null, category: "Others", isImagePattern: false },
  inheritParentPattern: true,
  byCategory: true,
  imageBase64Url: "",
};

export const X_AXIS_SETTINGS: IXAxisSettings = {
  position: Position.Bottom,
  isDisplayTitle: false,
  titleName: "",
  titleColor: "rgb(0,0,0)",
  titleFontSize: 12,
  titleFontFamily: '"Segoe UI", wf_segoe-ui_normal, helvetica, arial, sans-serif',
  isDisplayLabel: true,
  labelColor: "rgb(102,102,102)",
  labelFontFamily: '"Segoe UI", wf_segoe-ui_normal, helvetica, arial, sans-serif',
  labelFontSize: 12,
  isLabelAutoTilt: true,
  labelTilt: 30,
  isLabelAutoCharLimit: true,
  labelCharLimit: null,
  isDisplayImage: true,
  isImageWithinAxis: true,
  isImageWithinBar: false,
  imageWithinBarPosition: Position.Bottom,
  isShowImageBorder: true,
  imageStyle: {
    borderWidth: 2,
    borderColor: "rgb(102,102,102)",
  },
  minimumRange: 0,
  maximumRange: 0,
  isLogarithmScale: false,
  categoryType: AxisCategoryType.Categorical,
};

export const Y_AXIS_SETTINGS: IYAxisSettings = {
  position: Position.Left,
  isDisplayTitle: false,
  titleName: "",
  titleColor: "rgb(0,0,0)",
  titleFontSize: 12,
  titleFontFamily: '"Segoe UI", wf_segoe-ui_normal, helvetica, arial, sans-serif',
  isDisplayLabel: true,
  labelColor: "rgb(102,102,102)",
  labelFontFamily: '"Segoe UI", wf_segoe-ui_normal, helvetica, arial, sans-serif',
  labelFontSize: 12,
  labelCharLimit: 10,
  isDisplayImage: true,
  isImageWithinAxis: true,
  isImageWithinBar: false,
  imageWithinBarPosition: Position.Bottom,
  isShowImageBorder: true,
  imageStyle: {
    borderWidth: 2,
    borderColor: "rgb(91,121,185)",
  },
  minimumRange: 0,
  maximumRange: 0,
  isLogarithmScale: false,
  categoryType: AxisCategoryType.Categorical,
};

export const REFERENCE_LINES_SETTINGS: IReferenceLinesSettings = {
  axis: EXYAxisNames.X,
  type: EReferenceLinesType.Value,
  value: "",
  measureName: "",
  computation: EReferenceLineComputation.Fixed,
  rankOrder: EStartEndPosition.Start,
  rank: "1",
  label: "",
  labelFontFamily: '"Segoe UI", wf_segoe-ui_normal, helvetica, arial, sans-serif',
  labelColor: "rgba(0,0,0,1)",
  autoFontSize: true,
  labelFontSize: "16",
  labelPosition: EBeforeAfterPosition.Before,
  labelAlignment: ELCRPosition.Centre,
  lineStyle: LineType.Dashed,
  lineColor: "rgb(74, 74, 74)",
  autoLineWidth: true,
  lineWidth: "3",
  styling: [],
  isHighlightBarArea: true,
  barAreaPositionToHighlight: Position.Bottom,
  linePositionOnBar: Position.Right,
  shadeColor: "rgb(255,255,255)",
  transparency: 60,
};

export const BAR_CHART_RACE_SETTINGS: IRaceBarChartSettings = {
  allowTransition: true,
  barTransitionDuration: 0,
  dataChangeInterval: 500,
  labelColor: "rgb(102,102,102)",
  labelFontSize: 40,
  labelFontSizeType: EAutoCustomType.Auto,
  labelFontFamily: '"Segoe UI", wf_segoe-ui_normal, helvetica, arial, sans-serif',
  tickerButtonRadius: 30,
  tickerButtonRadiusType: EAutoCustomType.Auto,
  tickerButtonColor: "rgb(102,102,102)",
};

export const ERROR_BARS_SETTINGS: IErrorBarsSettings = {
  isEnabled: true,
  relationshipToMeasure: ERelationshipToMeasure.Absolute,
  lineColor: "rgb(155, 155, 155)",
  areaColor: "rgb(155, 155, 155)",
  lineWidth: 2,
  areaTransparency: 40,
  isShowErrorArea: false,
  isShowTooltip: true,
  isShowMarkers: false,
  isShowDashLine: true,
  tooltipLabelFormat: EErrorBarsTooltipLabelFormat.Absolute,
  SHOW_IN_LEFT_MENU: true,
  markers: {
    shape: EErrorBarsMarkerShape.Circle,
    size: 8,
    isMatchSeriesColor: false,
    color: "rgb(155, 155, 155)",
    transparency: 80,
  },
};

export const SERIES_LABEL_SETTINGS: ISeriesLabelSettings = {
  isSeriesLabelEnabled: true,
  seriesPosition: Position.Left,
  fontColor: "rgb(102,102,102)",
  fontSize: 12,
  fontStyle: FontStyle.None,
  fontFamily: '"Segoe UI", wf_segoe-ui_normal, helvetica, arial, sans-serif',
  maximumWidth: 100,
  isWordWrapEnabled: true,
  showBackground: true,
  backgroundColor: "rgb(0, 0, 0)",
  transparency: 90,
};

export const SMALL_MULTIPLES_SETTINGS: ISmallMultiplesSettings = {
  isSmallMultiplesEnabled: true,
  layoutType: ESmallMultiplesLayoutType.Grid,
  displayType: ESmallMultiplesDisplayType.Fixed,
  viewType: ESmallMultiplesViewType.Scroll,
  rows: 2,
  columns: 2,
  xAxisType: ESmallMultiplesAxisType.Individual,
  yAxisType: ESmallMultiplesAxisType.Individual,
  xAxisPosition: ESmallMultiplesXAxisPosition.FrozenBottomColumn,
  yAxisPosition: ESmallMultiplesYAxisPosition.FrozenLeftColumn,
  outerSpacing: 10,
  innerSpacing: 10,
  header: {
    displayType: ESmallMultiplesHeaderDisplayType.TitleAndTotalValue,
    fontFamily: '"Segoe UI", wf_segoe-ui_normal, helvetica, arial, sans-serif',
    fontSize: 12,
    fontColor: "rgb(102,102,102)",
    fontStyle: FontStyle.None,
    alignment: ESmallMultiplesHeaderAlignment.Left,
    position: ESmallMultiplesHeaderPosition.Top,
    isTextWrapEnabled: true
  },
  background: {
    type: ESmallMultiplesBackgroundType.All,
    panelColor: "rgb(255,255,255)",
    alternateColor: "rgb(255,255,255)",
    transparency: 100
  },
  border: {
    isShowBorder: false,
    style: LineType.Solid,
    width: 1,
    radius: 0,
    color: "rgb(0, 0, 0)"
  },
  shadow: {
    type: ESmallMultiplesShadowType.Simple,
    verticalOffset: 3,
    horizontalOffset: 3,
    blur: 7,
    spread: 0,
    color: "rgba(0, 0, 0, 10)",
    inset: false
  }
};

export const DYNAMIC_DEVIATION_SETTINGS: IDynamicDeviationSettings = {
  isEnabled: false,
  displayType: EDynamicDeviationDisplayTypes.FirstToLast,
  lastDisplayType: EDynamicDeviationDisplayTypes.FirstToLast,
  fromIndex: 1,
  toIndex: 2,
  position: Position.Right,
  labelDisplayType: EDynamicDeviationLabelDisplayTypes.Value,
  labelFontSize: 12,
  labelFontColor: "rgb(102,102,102)",
  labelFontFamily: '"Segoe UI", wf_segoe-ui_normal, helvetica, arial, sans-serif',
  isShowLabelBorder: false,
  borderWidth: 2,
  borderColor: "rgb(0, 0, 0)",
  isShowLabelBackground: true,
  backgroundColor: "rgb(0, 0, 0)",
  backgroundColorTransparency: 90,
  connectorType: EDynamicDeviationConnectingLineTypes.Arrow,
  connectorColor: "rgb(102,102,102)",
  connectorWidth: 5,
  connectingLineColor: "rgb(102,102,102)",
  connectingLineWidth: 1,
  isShowStartIndicator: true,
  isBarBorderEnabled: true,
};

export const CUT_AND_CLIP_AXIS_SETTINGS: ICutAndClipAxisSettings = {
  isEnabled: false,
  breakStart: 0,
  breakEnd: 0,
  markerStrokeColor: "rgb(102,102,102)",
  markerBackgroundColor: "rgb(255, 255, 255)",
};
